//
//  RandomClass.m
//  20_HW-UITableView_ Dynamic_Cells
//
//  Created by Вячеслав Алексеевич on 31.08.17.
//  Copyright © 2017 Вячеслав Алексеевич. All rights reserved.
//

#import "RandomClass.h"

@implementation RandomClass

#pragma mark - Random color

- (UIColor *)randomColor {
    CGFloat red, green, blue;
    red = (CGFloat)(arc4random_uniform(255)) / 256.0f;
    green = (CGFloat)(arc4random_uniform(255)) / 256.0f;
    blue = (CGFloat)(arc4random_uniform(255)) / 256.0f;
    return [UIColor colorWithRed:red
                           green:green
                            blue:blue alpha:1.0f];
}

- (NSString *)randomName {
    NSString *name = @"Объектно-ориентированное программирование (в дальнейшем ООП) — парадигма программирования, в которой основными концепциями являются понятия объектов и классов. В центре ООП находится понятие объекта. Объект — это сущность, экземпляр класса, которой можно посылать сообщения, и которая может на них реагировать, используя свои данные. Данные объекта скрыты от остальной программы. Сокрытие данных называется инкапсуляцией. Наличие инкапсуляции достаточно для объектности языка программирования, но ещё не означает его объектной ориентированности — для этого требуется наличие наследования. Но даже наличие инкапсуляции и наследования не делает язык программирования в полной мере объектным с точки зрения ООП. Основные преимущества ООП проявляются только в том случае, когда в языке программирования реализован полиморфизм; то есть возможность объектов с одинаковой спецификацией иметь различную реализацию. Хочу выделить что очень часто натыкаюсь на мнение, что в ООП стоит выделять еще одну немаловажную характеристику — абстракцию. Официально ее не вносили в обязательные черты ООП, но списывать ее со счетов не стоит. Абстрагирование — это способ выделить набор значимых характеристик объекта, исключая из рассмотрения не значимые  Соответственно, абстракция — это набор всех таких характеристик. Инкапсуляция — это свойство системы, позволяющее объединить данные и методы, работающие с ними в классе, и скрыть детали реализации от пользователя. Наследование — это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс — потомком, наследником или производным классом. Полиморфизм — это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.";
    NSArray *nameArray = [name componentsSeparatedByString:@" "];
    NSInteger randomNumber = arc4random() % nameArray.count;
    return [nameArray objectAtIndex:randomNumber];
}

@end
